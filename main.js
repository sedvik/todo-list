(()=>{"use strict";var n={538:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),i=t.n(o),r=t(645),A=t.n(r)()(i());A.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const c=A},402:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),i=t.n(o),r=t(645),A=t.n(r)()(i());A.push([n.id,"/* General Styles */\nhtml {\n    font-size: 16px;\n}\n\nbody {\n    background-color:rgb(247, 243, 215)\n}\n\n/* Header */\nheader {\n    margin-left: 240px;\n    background-color: rgb(250, 236, 198);\n    box-sizing: border-box;\n    border-bottom: 2px solid #222;\n    height: 80px;\n}\n\nh1 {\n    font-family: 'Fredericka the Great', cursive;\n    text-align: center;\n    font-size: 4rem;\n    font-weight: 400;\n    line-height: 80px;\n    vertical-align: center;\n}\n\nh2 {\n    font-family: 'Amatic SC', cursive;\n    font-size: 3.5rem;\n    font-weight: bold;\n}\n\nh3 {\n    font-family: 'Amatic SC', cursive;\n    font-size: 2.4rem;\n    font-weight: bold;\n}\n\nh4 {\n    font-size: 1.5rem;\n    font-weight: bold;\n}\n\n/* project side-bar */\n#project-bar {\n    height: 100%;\n    width: 240px;\n    position: fixed;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    background-color: #111;\n    overflow-x: hidden;\n    padding-top: 20px;\n}\n\n#project-bar h2 {\n    color: #eee;\n    text-align: center;\n    margin-bottom: 0.8rem;\n}\n\n#add-project {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin: 1.2rem 0;\n}\n\n#add-project input {\n    display: block;\n    box-sizing: border-box;\n    height: 30px;\n    width: 60%;\n    padding: 0px;\n    margin-right: 0.3rem;\n}\n\n#add-project-btn {\n    cursor: pointer;\n    height: 30px;\n    font-size: 1.4rem;\n}\n\n.project {\n    font-family: 'Lato', sans-serif;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 6px 8px 6px 16px;\n    font-size: 1.3rem;\n    color: #818181;\n}\n\n.project-name {\n    max-width: 180px;\n}\n\n.del-project {\n    background: none;\n    color: #818181;\n    border: none;\n    width: 20px;\n    height: 20px;\n    line-height: 20px;\n    margin: 0 0.2rem;\n    padding: 0;\n    font-size: 1.5rem;\n}\n\n.del-project:hover {\n    cursor: pointer;\n    color: #f1f1f1;\n}\n\n.active-project {\n    background-color: #333;\n    color: #bbb;\n    font-weight: bold;\n}\n\n.project-name:hover {\n    cursor: pointer;\n    color: #f1f1f1;\n}\n\n.active-project:hover {\n    cursor: default;\n    color: #bbb;\n}\n\n/* main */\nmain {\n    margin-left: 240px;\n    padding: 0px 10px;\n}\n\nmain h2 {\n    margin: 0.8rem;\n    text-align: center;\n}\n\n/* Add todo item form */\n#add-todo-btn {\n    cursor: pointer;\n    display: block;\n    margin: 2rem auto 1rem auto;\n    height: 30px;\n}\n\n.add-todo {\n    width: 400px;\n    height: 420px;\n    background-color: rgb(245, 233, 201);\n    border: 2px solid #333;\n    border-radius: 5px;\n    margin: 0 auto;\n    padding: 1rem;\n    text-align: center;\n    display: none;\n}\n\n#close-new-todo-form {\n    cursor: pointer;\n    background-color: rgb(228, 35, 35);\n    height: 30px;\n    width: 30px;\n    color: #fff;\n    font-size: 1.3rem;\n    font-weight: bold;\n    float: right;\n    margin: 0;\n}\n\n.add-todo h3 {\n    text-align: center;\n    margin-bottom: 0.5rem;\n    clear: right;\n}\n\n.add-todo label,\n.add-todo input,\n.add-todo textarea,\n.add-todo p,\n#submit-todo-btn {\n    margin-top: 0.7rem;\n}\n\n.add-todo input[type=\"text\"] {\n    width: 80%;\n}\n\n.add-todo label, \n#submit-todo-btn {\n    display: block;\n}\n\n.add-todo label,\n.add-todo p {\n    font-weight: bold;\n}\n\n.add-todo textarea {\n    resize: none;\n    width: 80%;\n    height: 100px;\n}\n\n#submit-todo-btn {\n    margin-left: auto;\n    margin-right: auto;\n    cursor: pointer;\n    font-weight: bold;\n    height: 30px;\n    width: 20%;\n}\n\n.add-todo .radio-label {\n    display: inline-block;\n    font-weight: 400;\n}\n\n/* Todo list */\n#todo-list h3 {\n    text-align: center;\n    margin-top: 2rem;\n}\n\n#todo-list-items {\n    width: 80%;\n    margin: 1rem auto;\n    display: flex;\n    flex-direction: row;\n    flex-wrap : wrap;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.inactive-todo {\n    cursor: pointer;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    margin: 0.5rem;\n    border: 2px solid #333;\n    border-radius: 5px;\n    width: 200px;\n    height: 200px;\n}\n\n.inactive-todo,\n.active-todo {\n    padding: 1rem;\n    margin: 1.5rem 0.5rem;\n    border-radius: 5px;\n    background-color: rgb(245, 233, 201);\n}\n\n.inactive-todo:hover {\n    background-color: rgb(247, 230, 185);\n}\n\n.inactive-todo > h4 {\n    text-align: center;\n    font-family: 'Lato', sans-serif;\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n\n.inactive-todo * {\n    /* Remove pointer interactivity from .inactive-todo child elements to allow event handler to fire if child elements are clicked*/\n    pointer-events: none;\n}\n\n.active-todo {\n    cursor: default;\n    width: 400px;\n    height: 400px;\n    text-align: center;\n}\n\n.active-todo label {\n    display: block;\n    clear: right;\n}\n\n.inactive-todo.complete {\n    text-decoration: line-through;\n}\n\n.low-priority {\n    border: 2px solid rgb(47, 226, 137);\n}\n\n.mid-priority {\n    border: 2px solid rgb(204, 204, 21);\n}\n\n.high-priority {\n    border: 2px solid red;\n}\n\n#toggle-complete,\n#del-active-todo {\n    cursor: pointer;\n    height: 30px;\n    width: 30px;\n    color: #fff;\n    font-size: 1.3rem;\n    font-weight: bold;\n    float: right;\n}\n\n#toggle-complete {\n    float: left;\n    background-color: #eee;\n    color: #eee;\n}\n\n#del-active-todo {\n    float: right;\n    background-color: rgb(228, 35, 35);\n}\n\n.complete #toggle-complete {\n    background-color: rgb(24, 153, 88);\n}\n\n.active-todo label,\n.active-todo input,\n.active-todo textarea,\n.active-todo p,\n#save-btn {\n    margin-top: 0.8rem;\n}\n\n.active-todo input[type=\"text\"] {\n    width: 80%;\n}\n\n.active-todo label,\n.active-todo p {\n    font-weight: bold;\n}\n\n.active-todo textarea {\n    resize: none;\n    width: 80%;\n    height: 100px;\n}\n\n#save-btn {\n    margin-left: auto;\n    margin-right: auto;\n    cursor: pointer;\n    font-weight: bold;\n    height: 30px;\n    width: 20%;\n}\n\n.active-todo .radio-label {\n    display: inline-block;\n    font-weight: 400;\n}","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"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",sourcesContent:["/* General Styles */\nhtml {\n    font-size: 16px;\n}\n\nbody {\n    background-color:rgb(247, 243, 215)\n}\n\n/* Header */\nheader {\n    margin-left: 240px;\n    background-color: rgb(250, 236, 198);\n    box-sizing: border-box;\n    border-bottom: 2px solid #222;\n    height: 80px;\n}\n\nh1 {\n    font-family: 'Fredericka the Great', cursive;\n    text-align: center;\n    font-size: 4rem;\n    font-weight: 400;\n    line-height: 80px;\n    vertical-align: center;\n}\n\nh2 {\n    font-family: 'Amatic SC', cursive;\n    font-size: 3.5rem;\n    font-weight: bold;\n}\n\nh3 {\n    font-family: 'Amatic SC', cursive;\n    font-size: 2.4rem;\n    font-weight: bold;\n}\n\nh4 {\n    font-size: 1.5rem;\n    font-weight: bold;\n}\n\n/* project side-bar */\n#project-bar {\n    height: 100%;\n    width: 240px;\n    position: fixed;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    background-color: #111;\n    overflow-x: hidden;\n    padding-top: 20px;\n}\n\n#project-bar h2 {\n    color: #eee;\n    text-align: center;\n    margin-bottom: 0.8rem;\n}\n\n#add-project {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin: 1.2rem 0;\n}\n\n#add-project input {\n    display: block;\n    box-sizing: border-box;\n    height: 30px;\n    width: 60%;\n    padding: 0px;\n    margin-right: 0.3rem;\n}\n\n#add-project-btn {\n    cursor: pointer;\n    height: 30px;\n    font-size: 1.4rem;\n}\n\n.project {\n    font-family: 'Lato', sans-serif;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 6px 8px 6px 16px;\n    font-size: 1.3rem;\n    color: #818181;\n}\n\n.project-name {\n    max-width: 180px;\n}\n\n.del-project {\n    background: none;\n    color: #818181;\n    border: none;\n    width: 20px;\n    height: 20px;\n    line-height: 20px;\n    margin: 0 0.2rem;\n    padding: 0;\n    font-size: 1.5rem;\n}\n\n.del-project:hover {\n    cursor: pointer;\n    color: #f1f1f1;\n}\n\n.active-project {\n    background-color: #333;\n    color: #bbb;\n    font-weight: bold;\n}\n\n.project-name:hover {\n    cursor: pointer;\n    color: #f1f1f1;\n}\n\n.active-project:hover {\n    cursor: default;\n    color: #bbb;\n}\n\n/* main */\nmain {\n    margin-left: 240px;\n    padding: 0px 10px;\n}\n\nmain h2 {\n    margin: 0.8rem;\n    text-align: center;\n}\n\n/* Add todo item form */\n#add-todo-btn {\n    cursor: pointer;\n    display: block;\n    margin: 2rem auto 1rem auto;\n    height: 30px;\n}\n\n.add-todo {\n    width: 400px;\n    height: 420px;\n    background-color: rgb(245, 233, 201);\n    border: 2px solid #333;\n    border-radius: 5px;\n    margin: 0 auto;\n    padding: 1rem;\n    text-align: center;\n    display: none;\n}\n\n#close-new-todo-form {\n    cursor: pointer;\n    background-color: rgb(228, 35, 35);\n    height: 30px;\n    width: 30px;\n    color: #fff;\n    font-size: 1.3rem;\n    font-weight: bold;\n    float: right;\n    margin: 0;\n}\n\n.add-todo h3 {\n    text-align: center;\n    margin-bottom: 0.5rem;\n    clear: right;\n}\n\n.add-todo label,\n.add-todo input,\n.add-todo textarea,\n.add-todo p,\n#submit-todo-btn {\n    margin-top: 0.7rem;\n}\n\n.add-todo input[type=\"text\"] {\n    width: 80%;\n}\n\n.add-todo label, \n#submit-todo-btn {\n    display: block;\n}\n\n.add-todo label,\n.add-todo p {\n    font-weight: bold;\n}\n\n.add-todo textarea {\n    resize: none;\n    width: 80%;\n    height: 100px;\n}\n\n#submit-todo-btn {\n    margin-left: auto;\n    margin-right: auto;\n    cursor: pointer;\n    font-weight: bold;\n    height: 30px;\n    width: 20%;\n}\n\n.add-todo .radio-label {\n    display: inline-block;\n    font-weight: 400;\n}\n\n/* Todo list */\n#todo-list h3 {\n    text-align: center;\n    margin-top: 2rem;\n}\n\n#todo-list-items {\n    width: 80%;\n    margin: 1rem auto;\n    display: flex;\n    flex-direction: row;\n    flex-wrap : wrap;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.inactive-todo {\n    cursor: pointer;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    margin: 0.5rem;\n    border: 2px solid #333;\n    border-radius: 5px;\n    width: 200px;\n    height: 200px;\n}\n\n.inactive-todo,\n.active-todo {\n    padding: 1rem;\n    margin: 1.5rem 0.5rem;\n    border-radius: 5px;\n    background-color: rgb(245, 233, 201);\n}\n\n.inactive-todo:hover {\n    background-color: rgb(247, 230, 185);\n}\n\n.inactive-todo > h4 {\n    text-align: center;\n    font-family: 'Lato', sans-serif;\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n\n.inactive-todo * {\n    /* Remove pointer interactivity from .inactive-todo child elements to allow event handler to fire if child elements are clicked*/\n    pointer-events: none;\n}\n\n.active-todo {\n    cursor: default;\n    width: 400px;\n    height: 400px;\n    text-align: center;\n}\n\n.active-todo label {\n    display: block;\n    clear: right;\n}\n\n.inactive-todo.complete {\n    text-decoration: line-through;\n}\n\n.low-priority {\n    border: 2px solid rgb(47, 226, 137);\n}\n\n.mid-priority {\n    border: 2px solid rgb(204, 204, 21);\n}\n\n.high-priority {\n    border: 2px solid red;\n}\n\n#toggle-complete,\n#del-active-todo {\n    cursor: pointer;\n    height: 30px;\n    width: 30px;\n    color: #fff;\n    font-size: 1.3rem;\n    font-weight: bold;\n    float: right;\n}\n\n#toggle-complete {\n    float: left;\n    background-color: #eee;\n    color: #eee;\n}\n\n#del-active-todo {\n    float: right;\n    background-color: rgb(228, 35, 35);\n}\n\n.complete #toggle-complete {\n    background-color: rgb(24, 153, 88);\n}\n\n.active-todo label,\n.active-todo input,\n.active-todo textarea,\n.active-todo p,\n#save-btn {\n    margin-top: 0.8rem;\n}\n\n.active-todo input[type=\"text\"] {\n    width: 80%;\n}\n\n.active-todo label,\n.active-todo p {\n    font-weight: bold;\n}\n\n.active-todo textarea {\n    resize: none;\n    width: 80%;\n    height: 100px;\n}\n\n#save-btn {\n    margin-left: auto;\n    margin-right: auto;\n    cursor: pointer;\n    font-weight: bold;\n    height: 30px;\n    width: 20%;\n}\n\n.active-todo .radio-label {\n    display: inline-block;\n    font-weight: 400;\n}"],sourceRoot:""}]);const c=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(o)for(var c=0;c<this.length;c++){var a=this[c][0];null!=a&&(A[a]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);o&&A[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),A=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(A).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},A=[],c=0;c<n.length;c++){var a=n[c],d=o.base?a[0]+o.base:a[0],l=r[d]||0,s="".concat(d," ").concat(l);r[d]=l+1;var u=t(s),p={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=i(p,o);o.byIndex=c,e.splice(c,0,{identifier:s,updater:h,references:1})}A.push(s)}return A}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var A=0;A<r.length;A++){var c=t(r[A]);e[c].references--}for(var a=o(n,i),d=0;d<r.length;d++){var l=t(r[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=a}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{const n=function(n,e,t){const o=document.createElement(n);return o.textContent=e,void 0===t||0===Object.keys(t).length||(t.id&&function(n,e){n.id=e}(o,t.id),t.class&&function(n,e){"string"==typeof e?n.classList.add(e):e.forEach((e=>{n.classList.add(e)}))}(o,t.class),void 0!==t.attributes&&0!==Object.keys(t.attributes).length&&function(n,e){for(let t in e)n.setAttribute(t,e[t])}(o,t.attributes)),o},e=function(n,e){return e.forEach((e=>{n.appendChild(e)})),n};const o=function(t,o=""){const i=n("div",""),r=[n("label","Title",{attributes:{for:t}}),n("input","",{id:t,attributes:{name:t,type:"text",value:o}})];return e(i,r),i},i=function(t,o=""){const i=n("div",""),r=[n("label","Description",{attributes:{for:t}}),n("textarea",o,{id:t,attributes:{name:t,rows:"5",cols:"30"}})];return e(i,r),i},r=function(t,o=""){const i=n("div",""),r=n("label","Due Date",{attributes:{for:t}}),A=n("input","",{id:t,attributes:{name:t,type:"date"}});A.value=o;return e(i,[r,A]),i},A=function(t,o,i,r,A){const c=n("div",""),a=[],d=n("p","Priority");a.push(d);for(let e=0;e<t.length;e++){const c={type:"radio",name:r,value:o[e]};o[e]===A&&(c.checked="checked");const d=n("input","",{id:t[e],attributes:c}),l=n("label",i[e],{class:"radio-label",attributes:{for:t[e]}});a.push(d,l)}return e(c,a),c};function c(n,e){const t=[];return e?t.push("active-todo"):t.push("inactive-todo"),n.complete&&t.push("complete"),"low"===n.priority?t.push("low-priority"):"mid"===n.priority?t.push("mid-priority"):"high"===n.priority&&t.push("high-priority"),t}function a(t,a){const d=n("div","",{id:"todo-list-items"});return t.forEach((t=>{let l;l=null===a||t.title!=a.title?function(t){const o=c(t,!1),i=n("div","",{class:o,attributes:{"data-title":t.title}}),r=[n("h4",t.title),n("p",`Due: ${t.dueDate}`)];return e(i,r),i}(t):function(t){const a=c(t,!0),d=n("div","",{class:a,attributes:{"data-title":t.title}}),l=n("button","",{id:"toggle-complete"});l.innerHTML="&check;";const s=[l,n("button","X",{id:"del-active-todo"}),o("update-title",t.title),i("update-description",t.description),r("update-date",t.dueDate),A(["update-low","update-mid","update-high"],["low","mid","high"],["Low","Mid","High"],"update-priority",t.priority),n("button","Save",{id:"save-btn"})];return e(d,s),d}(t),d.appendChild(l)})),d}const d={events:{},subscribe:function(n,e){this.events[n]=this.events[n]||[],this.events[n].push(e)},unsubscribe:function(n,e){if(this.events[n])for(let t=0;t<this.events[n].length;t++)if(this.events[n][t]===e){this.events[n].splice(t,1);break}},publish:function(n,e){this.events[n]&&this.events[n].forEach((function(n){n(e)}))}},l=function(){function t(){const n=document.querySelector(".add-todo"),e=document.querySelector("#add-todo-btn");n.style.display="block",e.style.display="none"}function c(){const n=document.querySelector(".add-todo"),e=document.querySelector("#add-todo-btn");n.style.display="none",e.style.display="block"}function l(){document.querySelector("#new-title").value="",document.querySelector("#new-description").value="",document.querySelector("#new-date").value="",document.querySelector('input[name="new-priority"]:checked').checked=!1}function s(n){window.alert(n)}function u(t){const o=document.querySelector("#project-list");o.textContent="";const i=t.projects.map((n=>n.name)),r=function(t,o){const i=n("div","");return t.forEach((t=>{const r=function(t,o){const i=n("div","",{class:o?["project","active-project"]:["project"],attributes:{"data-name":t}}),r=[n("p",t,{class:"project-name"}),n("button","-",{class:"del-project"})];return e(i,r),i}(t,t===o);i.append(r)})),i}(i,t.activeProject.name);o.appendChild(r),d.publish("projectsRender")}function p(t){const o=document.querySelector("#todo-list");o.textContent="";const i=function(t,o){const i=n("div",""),r=[n("h3","Todo Items"),a(t,o)];return e(i,r),i}(t.activeProject.todos,t.activeProject.activeTodo);o.appendChild(i),d.publish("todosRender")}function h(t){u(t),function(e){const t=document.querySelector("#project-title-content");t.textContent="";const o=(i=e.activeProject.name,n("h2",i));var i;t.appendChild(o),d.publish("projectTitleRender")}(t),function(){const t=document.querySelector("#new-todo-content");t.textContent="";const c=function(){const t=n("div",""),c=n("button","Add Todo",{id:"add-todo-btn"}),a=function(){const t=n("div","",{class:"add-todo"}),c=[n("button","X",{id:"close-new-todo-form"}),n("h3","Add New Todo"),o("new-title"),i("new-description"),r("new-date"),A(["new-low","new-mid","new-high"],["low","mid","high"],["Low","Mid","High"],"new-priority"),n("button","Add",{id:"submit-todo-btn"})];return e(t,c),t}();return e(t,[c,a]),t}();t.appendChild(c),d.publish("newTodoContentRender")}(),p(t)}return{init:function(){d.subscribe("appInit",h),d.subscribe("activateNewTodoForm",t),d.subscribe("disableNewTodoForm",c),d.subscribe("projectsChange",u),d.subscribe("todosChange",p),d.subscribe("activeProjectChange",h),d.subscribe("addTodo",l),d.subscribe("invalidTodoFields",s),d.subscribe("invalidProjectName",s),d.subscribe("invalidProjectDeletion",s)}}}(),s={changeTitle:function(n){this.title=n},changeDescription:function(n){this.description=n},changeDueDate:function(n){this.dueDate=n},changePriority:function(n){this.priority=n},toggleComplete:function(){this.complete=!this.complete},update:function(n,e,t,o){this.changeTitle(n),this.changeDescription(e),this.changeDueDate(t),this.changePriority(o)}};function u(n,e,t,o,i=!1){return Object.assign(Object.create(s),{title:n,description:e,dueDate:t,priority:o,complete:i})}const p={findIndexByTitle:function(n){const e=this.todos.findIndex((e=>e.title===n));return e},addTodo:function(n){this.todos.push(n)},deleteTodo:function(n){const e=this.findIndexByTitle(n);-1!==e&&this.todos.splice(e,1)},deleteActiveTodo:function(){const n=this.findIndexByTitle(this.activeTodo.title);-1!==n&&(this.activeTodo=null,this.todos.splice(n,1))},setActiveTodo:function(n){void 0===n&&(this.activeTodo=null);const e=this.findIndexByTitle(n);-1!==e&&(this.activeTodo=this.todos[e])}};function h(n){return Object.assign(Object.create(p),{name:n,activeTodo:null,todos:[]})}const f=function(){let n,e=[];function t(){return{projects:e,activeProject:n}}function o(e,t,o,i,r){let A;if(function(e,t){const o=n.todos.map((n=>n.title));return!o.includes(e)||!(!t||n.activeTodo.title!==e)}(e,r))if(void 0===e||""===e)A="Please enter a todo title";else if(void 0===t||""===t)A="Please enter a todo description";else if(void 0===o||""===o)A="Please enter a todo due date";else{if(null!==i)return!0;A="Please select a todo priority"}else A="Todo title must be unique";d.publish("invalidTodoFields",A)}function i(o){const i=function(n){return e.find((e=>e.name===n))}(o);n=i,d.publish("activeProjectChange",t())}return{getProjects:function(){return e},getActiveProject:function(){return n},changeActiveProject:i,addProject:function(n){if(!function(n){const t=e.map((n=>n.name));return!t.includes(n)||(d.publish("invalidProjectName","Please enter a unique project name"),!1)}(n))return;const o=h(n);e.push(o),d.publish("projectsChange",t())},deleteProject:function(o){const r=function(n){const t=e.findIndex((e=>e.name===n));return t}(o);if(1===e.length)return void d.publish("invalidProjectDeletion","Projects list cannnot be empty");let A;n.name===o&&(A=!0),e.splice(r,1),A?i(e[0].name):d.publish("projectsChange",t())},addTodo:function(e,i,r,A){if(!o(e,i,r,A,!1))return;const c=u(e,i,r,A);n.addTodo(c),d.publish("addTodo"),d.publish("todosChange",t())},changeTodo:function(e,i,r,A){o(e,i,r,A,!0)&&(n.activeTodo.update(e,i,r,A),n.setActiveTodo(),d.publish("todosChange",t()))},changeActiveTodo:function(e){n.setActiveTodo(e),d.publish("todosChange",t())},deleteActiveTodo:function(){n.deleteActiveTodo(),d.publish("todosChange",t())},toggleTodoComplete:function(){n.activeTodo.toggleComplete(),d.publish("todosChange",t())},init:function(o){o.forEach((n=>{const t=h(n.name);n.todos.forEach((n=>{const e=u(n.title,n.description,n.dueDate,n.priority,n.complete);t.addTodo(e)})),e.push(t)})),n=e[0],d.publish("appInit",t())}}}(),m=function(){function n(){const n=document.querySelector("#add-project input"),e=n.value;e&&f.addProject(e),n.value=""}function e(n){const e=n.target.parentNode.getAttribute("data-name");f.changeActiveProject(e)}function t(n){const e=n.target.parentNode.getAttribute("data-name");window.confirm(`Are you sure you want to delete the ${e} project?`)&&f.deleteProject(e)}function o(){d.publish("activateNewTodoForm")}function i(){d.publish("disableNewTodoForm")}function r(){const n=document.querySelector("#new-title").value,e=document.querySelector("#new-description").value,t=document.querySelector("#new-date").value,o=document.querySelector('input[name="new-priority"]:checked');let i;i=o?o.value:null,f.addTodo(n,e,t,i)}function A(n){const e=n.target.getAttribute("data-title");f.changeActiveTodo(e)}function c(){f.toggleTodoComplete()}function a(){window.confirm("Do you want to delete this todo item?")&&f.deleteActiveTodo()}function l(){const n=document.querySelector("#update-title").value,e=document.querySelector("#update-description").value,t=document.querySelector("#update-date").value,o=document.querySelector('input[name="update-priority"]:checked').value;f.changeTodo(n,e,t,o)}function s(){document.querySelector("#add-project-btn").addEventListener("click",n),document.querySelectorAll(".project-name").forEach((n=>{n.addEventListener("click",e)})),document.querySelectorAll(".del-project").forEach((n=>{n.addEventListener("click",t)}))}function u(){document.querySelector("#add-todo-btn").addEventListener("click",o),document.querySelector("#close-new-todo-form").addEventListener("click",i),document.querySelector("#submit-todo-btn").addEventListener("click",r)}function p(){document.querySelectorAll(".inactive-todo").forEach((n=>{n.addEventListener("click",A)})),function(){const n=document.querySelector("#toggle-complete");null!==n&&n.addEventListener("click",c)}(),function(){const n=document.querySelector("#del-active-todo");null!==n&&n.addEventListener("click",a)}(),function(){const n=document.querySelector("#save-btn");null!==n&&n.addEventListener("click",l)}()}return{init:function(){d.subscribe("projectsRender",s),d.subscribe("newTodoContentRender",u),d.subscribe("todosRender",p)}}}(),b=function(){const n=[{name:"Project 1",todos:[]}];function e(n){const e=JSON.stringify(n.projects);window.localStorage.setItem("projects",e)}return{init:function(){d.subscribe("projectsChange",e),d.subscribe("todosChange",e),d.subscribe("activeProjectChange",e)},load:function(){let e;if(function(){try{const n=window.localStorage,e="__storage_test__";return n.setItem(e,e),n.removeItem(e),!0}catch(n){return!1}}()){const t=window.localStorage;e=JSON.parse(t.getItem("projects")),null===e&&(e=n)}return e}}}();var g=t(379),C=t.n(g),B=t(795),I=t.n(B),v=t(569),y=t.n(v),x=t(565),w=t.n(x),k=t(216),j=t.n(k),E=t(589),T=t.n(E),q=t(538),S={};S.styleTagTransform=T(),S.setAttributes=w(),S.insert=y().bind(null,"head"),S.domAPI=I(),S.insertStyleElement=j(),C()(q.Z,S),q.Z&&q.Z.locals&&q.Z.locals;var Y=t(402),z={};z.styleTagTransform=T(),z.setAttributes=w(),z.insert=y().bind(null,"head"),z.domAPI=I(),z.insertStyleElement=j(),C()(Y.Z,z),Y.Z&&Y.Z.locals&&Y.Z.locals;const P=b.load();l.init(),m.init(),b.init(),f.init(P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,